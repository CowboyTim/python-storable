Contribution Guide
==================

TODO


Unit Tests
==========

Organisation
------------

Unit tests are organised in the following way:

* The file ``test.pl`` generates test-data. It writes the generated files into
  tests/resources adding subfolders for architecture and storable version.
* For each test-case generated by ``test.pl``, the corresponding "expected"
  value is contained in the folder ``tests/results``.
* The test module ``tests/test.py`` contains the testing code.

Using this folder structure, unit-tests are dynamically created.


Running
-------

I highly recommend using ``pytest`` to run the tests. This has several reasons:

* Unit-tests are dynamically generated and there is no runner included. Pytest
  comes with it's own really useful runner.
* Depending on bug/error the console output becomes barely readable due to the
  sheer number of tests. ``pytest`` can help with better ``stout`` handling and
  ``--exitfirst``.
* ``pytest`` can easily limit the executed tests using ``-k``.

Example Command (assuming a virtualenv in ``./env``)::

    ./env/bin/pytest tests/test.py
